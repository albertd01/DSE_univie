/*
 * Meeting Scheduler API
 * API for scheduling and managing meeting polls.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package client.openapi.api;

import client.openapi.model.Meeting;
import client.openapi.model.MeetingCreationRequest;
import client.openapi.model.MeetingExport;
import client.openapi.model.MeetingResponse;
import client.openapi.model.MeetingUpdateRequest;
import client.openapi.model.TimeSlotRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.web.client.RestClientException;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Add time slots to a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void addTimeSlotsTest() {
        String meetingId = null;
        TimeSlotRequest timeSlotRequest = null;

        Meeting response = api.addTimeSlots(meetingId, timeSlotRequest);

        // TODO: test validations
    }
    
    /**
     * Create a new meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void createMeetingTest() {
        MeetingCreationRequest meetingCreationRequest = null;

        Meeting response = api.createMeeting(meetingCreationRequest);

        // TODO: test validations
    }
    
    /**
     * Delete a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void deleteMeetingTest() {
        String meetingId = null;

        api.deleteMeeting(meetingId);

        // TODO: test validations
    }
    
    /**
     * Export meeting responses
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void exportResponsesTest() {
        String meetingId = null;

        MeetingExport response = api.exportResponses(meetingId);

        // TODO: test validations
    }
    
    /**
     * Get meeting details
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void getMeetingTest() {
        String meetingId = null;

        Meeting response = api.getMeeting(meetingId);

        // TODO: test validations
    }
    
    /**
     * Publish a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void publishMeetingTest() {
        String meetingId = null;

        Meeting response = api.publishMeeting(meetingId);

        // TODO: test validations
    }
    
    /**
     * Remove a time slot from a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void removeTimeSlotTest() {
        String meetingId = null;
        String timeSlotId = null;

        api.removeTimeSlot(meetingId, timeSlotId);

        // TODO: test validations
    }
    
    /**
     * Submit responses to a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void submitResponsesTest() {
        String meetingId = null;
        MeetingResponse meetingResponse = null;

        Meeting response = api.submitResponses(meetingId, meetingResponse);

        // TODO: test validations
    }
    
    /**
     * Update a meeting poll
     *
     * 
     *
     * @throws RestClientException
     *          if the Api call fails
     */
    @Test
    void updateMeetingTest() {
        String meetingId = null;
        MeetingUpdateRequest meetingUpdateRequest = null;

        Meeting response = api.updateMeeting(meetingId, meetingUpdateRequest);

        // TODO: test validations
    }
    
}
